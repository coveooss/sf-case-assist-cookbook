import { LightningElement, track, api } from 'lwc';
import {
  FlowAttributeChangeEvent,
  FlowNavigationNextEvent
} from 'lightning/flowSupport';

import CaseAssistEndpoint from 'c/caseAssistEndpoint';
import { debounce, getVisitorId } from 'c/utils';
import { analyticsActionNames } from 'c/analyticsActionNames';
import { coveoua } from 'c/analyticsBeacon';

const COVEO_REASON_FIELD_NAME = 'sfreason';

export default class CaseAssistFlow extends LightningElement {
  /**
   * availableActions is an array that contains the available flow actions when this component is used within a flow
   * @see https://developer.salesforce.com/docs/component-library/bundle/lightning-flow-support/documentation
   */
  @api availableActions = [];

  /**
   * This is the main title of the screen.
   */
  @api heading = 'How can we help you today?';

  /**
   * The title of the sub-section below Subject and Description
   */
  @api subHeading = 'Select related categories';

  /**
   * This is the delay before sending a query and analytics events on user typing.
   */
  @api caseEditDelayMs = 500;

  @track theCase = {};
  @track fieldSuggestions = {};

  constructor() {
    super();

    // Case Assist Endpoint
    this.endpoint = new CaseAssistEndpoint();
  }

  /**
   * caseData is the variable that will be accessible as an output variable to the Flow.
   * @see https://developer.salesforce.com/docs/component-library/bundle/lightning-flow-support/documentation
   */
  @api
  get caseData() {
    return this._caseData;
  }

  set caseData(caseData) {
    this._caseData = caseData;
  }

  connectedCallback() {
    // Debounce function for "search-as-you-type" it will trigger when there is no key stroke for 500ms.
    this.debounceSearch = debounce(async () => {
      try {
        const visitorId = getVisitorId();

        const classificationData = await this.endpoint.fetchCaseClassifications(
          this.theCase.Subject,
          this.theCase.Description,
          visitorId || 'default'
        );
        this.parseFieldSuggestions(classificationData);
      } catch (err) {
        console.error(err);
      }
    }, this.caseEditDelayMs);

    // Debounce function to not send an event every letter typed.
    this.debounceTicketUpdate = debounce(
      this.sendTicketFieldUpdated,
      this.caseEditDelayMs
    );

    // On component connect, send a ticket_create_start since this is the first screen.
    this.sendTicketCreateStart();
  }

  // When the subject/description of the case changes.
  handleFormInputChange(event) {
    this.theCase[event.target.fieldName] = event.target.value;
    this.debounceTicketUpdate(event.target.fieldName);
    this.updateFlowState();
    if (this.shouldShowSuggestions) {
      // Trigger the API call to get field suggestions.
      this.debounceSearch();
    }
  }

  // Parse the data from the suggestions
  parseFieldSuggestions(suggestionsData) {
    const data = suggestionsData || { responseId: '', fields: {} };
    this.lastResponseId = data.responseId || '';
    this.fieldSuggestions = data.fields || {};
  }

  // Returns the field suggestions specific to the reason field.
  get reasonSuggestions() {
    let reasonSuggestions = [];
    if (
      this.fieldSuggestions &&
      this.fieldSuggestions[COVEO_REASON_FIELD_NAME]
    ) {
      reasonSuggestions = this.fieldSuggestions[COVEO_REASON_FIELD_NAME]
        .predictions;
    }
    return reasonSuggestions;
  }

  // Specific rule to hide the field section of the UI until the user has entered enough information in the text fields.
  get shouldShowSuggestions() {
    return (
      this.theCase.Subject &&
      this.theCase.Description &&
      this.theCase.Description.length >= 10
    );
  }

  // When a picklist value is selected.
  handlePicklistChange(event) {
    // Ignore the picklist change event when it was generated by changing the value programmatically.
    if (this.skipPicklistOnce === event.target.fieldName) {
      this.skipPicklistOnce = '';
      return;
    }
    this.theCase[event.target.fieldName] = event.target.value;
    this.sendTicketFieldUpdated(event.target.fieldName);
    this.updateFlowState();
  }

  // When a suggestion badge is clicked under a picklist.
  handleSuggestionSelected(event) {
    const fieldToSet = event.detail.fieldName;
    // Prepare to skip the next picklist event because it was changed programmatically.
    this.skipPicklistOnce = event.target.fieldName;
    const picklistToSet = this.template.querySelector(
      `lightning-input-field[data-field-name=${fieldToSet}]`
    );
    picklistToSet.value = event.detail.value;
    this.theCase[fieldToSet] = event.detail.value;

    this.sendTicketClassificationClick(event.detail);

    this.updateFlowState();
  }

  // This method is used to notify the flow of the change to the case fields values.
  updateFlowState() {
    this._caseData = JSON.stringify(this.theCase);
    const attributeChangeEvent = new FlowAttributeChangeEvent(
      'caseData',
      this._caseData
    );
    this.dispatchEvent(attributeChangeEvent);
  }

  handleButtonNext() {
    // check if NEXT is allowed on this screen
    if (this.availableActions.some((action) => action === 'NEXT')) {
      this.sendTicketNextStage();
      const navigateNextEvent = new FlowNavigationNextEvent();
      this.dispatchEvent(navigateNextEvent);
    }
  }

  // Handling Analytics
  sendTicketCreateStart() {
    coveoua('svc:setAction', analyticsActionNames.TICKET_CREATE_START);
    coveoua('send', 'event', 'svc', 'flowStart');
  }

  sendTicketFieldUpdated(fieldName) {
    this.analyticsUpdateTicketData();
    coveoua('svc:setAction', analyticsActionNames.TICKET_FIELD_UPDATE, {
      fieldName
    });
    coveoua('send', 'event', 'svc', 'click');
  }

  sendTicketClassificationClick(data) {
    this.analyticsUpdateTicketData();
    coveoua('svc:setAction', analyticsActionNames.TICKET_CLASSIFICATION_CLICK, {
      classificationId: data.id,
      responseId: this.lastResponseId,
      fieldName: data.fieldName,
      classification: {
        value: data.value,
        confidence: data.confidence
      }
    });
    coveoua('send', 'event', 'svc', 'click');
  }

  sendTicketNextStage() {
    this.analyticsUpdateTicketData();
    coveoua('svc:setAction', analyticsActionNames.TICKET_NEXT_STAGE);
    coveoua('send', 'event', 'svc', 'click');
  }

  analyticsUpdateTicketData() {
    coveoua('svc:setTicket', {
      subject: this.theCase.Subject,
      description: this.theCase.Description,
      custom: {
        reason: this.theCase.Reason
      }
    });
  }
}
